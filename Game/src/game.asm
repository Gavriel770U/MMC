

;
; ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
; บ	This file is generated by The Interactive Disassembler (IDA)	    บ
; บ	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    บ
; บ			 Licensed to: Freeware version			    บ
; ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ
;
; Input	MD5   :	D43FE11510074BF822216CE4669BC267

; File Name   :	C:\Users\Magshimim\Downloads\c00l357_g4m3_3v3r.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001000 (   4096.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00000600
; Flags	60000020: Text Executable Readable
; Alignment	: default

.686p
.mmx
.model flat


; Segment type:	Pure code
; Segment permissions: Read/Execute
CODE segment para public 'CODE' use32
assume cs:CODE
;org 401000h
assume es:nothing, ss:nothing, ds:CODE,	fs:nothing, gs:nothing



public start
start proc near
push	0		; lpModuleName
call	GetModuleHandleA
mov	ds:hInstance, eax
mov	ds:dword_402197, 4003h
mov	ds:dword_40219B, offset	word_4011A6
mov	ds:dword_40219F, 0
mov	ds:dword_4021A3, 0
mov	eax, ds:hInstance
mov	ds:dword_4021A7, eax
push	4		; lpIconName
push	eax		; hInstance
call	LoadIconA
mov	ds:dword_4021AB, eax
push	7F00h		; lpCursorName
push	0		; hInstance
call	LoadCursorA
mov	ds:dword_4021AF, eax
push	0		; hTemplateFile
push	offset unk_40216F ; dwFlagsAndAttributes
push	3		; dwCreationDisposition
push	0		; lpSecurityAttributes
push	3		; dwShareMode
push	0C0000000h	; dwDesiredAccess
push	offset FileName	; "Keyfile.dat"
call	CreateFileA
cmp	eax, 0FFFFFFFFh
jnz	short loc_40109A
push	0		; uType
push	offset Caption	; " MagshimimChallenge"
push	offset Text	; "Magshimim license out of date. Please b"...
push	0		; hWnd
call	MessageBoxA
call	ExitProcess
jmp	locret_40121D	; uExitCode

loc_40109A:		; lpOverlapped
push	0
push	offset NumberOfBytesRead ; lpNumberOfBytesRead
push	46h		; nNumberOfBytesToRead
push	offset Buffer	; lpBuffer
push	eax		; hFile
call	ReadFile
test	eax, eax
jnz	short loc_4010B4
jmp	short loc_4010F7

loc_4010B4:
xor	ebx, ebx
xor	esi, esi
cmp	ds:NumberOfBytesRead, 10h
jl	short loc_4010F7

loc_4010C1:
mov	al, ds:Buffer[ebx]
cmp	al, 0
jz	short loc_4010D3
cmp	al, 47h
jnz	short loc_4010D0
inc	esi

loc_4010D0:
inc	ebx
jmp	short loc_4010C1

loc_4010D3:
cmp	esi, 8
jl	short loc_4010F7
jmp	loc_401205
align 2
dd 0
align 4
dd 4 dup(0)
db 0, 0EBh, 0

loc_4010F7:		; uType
push	0
push	offset Caption	; " MagshimimChallenge"
push	offset aKeyfileIsNotVa ; "Keyfile is not valid.	Sorry."
push	0		; hWnd
call	MessageBoxA
call	ExitProcess
jmp	locret_40121D	; uExitCode
dd 0
db 0
dd 0
align 10h
dd 3 dup(0)
dd 0
db 2 dup(0)
dd 0
align 4
dd 0
db 2 dup(0)
dd 0
align 4
dd 5 dup(0)
db 2 dup(0)
dd 0
align 10h
dd 0
dd 0
dd 3 dup(0)
db 2 dup(0)
dd 0
align 4
dd 2 dup(0)
db 2 dup(0)
dd 0
align 4
dd 0
dd 0
dd 2 dup(0)
db 0
dd 0
align 4
db 2 dup(0)
word_4011A6 dw 0
dd 13h dup(0)
db 0
dd 0
align 4
dd 2 dup(0)
db 0

loc_401205:		; uType
push	0
push	offset Caption	; " MagshimimChallenge"
push	offset aDone_EnjoyYour ; "Done.	Enjoy your new license!!!"
push	0		; hWnd
call	MessageBoxA
call	ExitProcess

locret_40121D:
retn
start endp ; sp	=  4

align 10h
dd 0Eh dup(0)
db 3 dup(0)
dd 0
jmp	ds:WriteFile
jmp	ds:GetPrivateProfileStringA
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
jmp	ds:LocalSize
jmp	ds:CloseHandle
jmp	ds:OpenFile
; [00000006 BYTES: COLLAPSED FUNCTION CreateFileA. PRESS KEYPAD	"+" TO EXPAND]
jmp	ds:OpenProcess
jmp	ds:CompareFileTime
jmp	ds:Beep
jmp	ds:GlobalAlloc
jmp	ds:GetCurrentProcess
jmp	ds:ExitThread
jmp	ds:TerminateProcess
jmp	ds:GlobalFree
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess. PRESS KEYPAD	"+" TO EXPAND]
jmp	ds:GetVolumeInformationA
jmp	ds:WriteProcessMemory
jmp	ds:GetLocalTime
jmp	ds:GetExitCodeProcess
jmp	ds:QueryPerformanceCounter
; [00000006 BYTES: COLLAPSED FUNCTION ReadFile.	PRESS KEYPAD "+" TO EXPAND]
jmp	ds:VirtualProtect
jmp	ds:CreateDirectoryA
jmp	ds:DispatchMessageA
jmp	ds:DefWindowProcA
jmp	ds:CreateWindowExA
jmp	ds:EndDialog
jmp	ds:EndPaint
jmp	ds:UpdateWindow
jmp	ds:SetWindowPos
jmp	ds:BeginPaint
; [00000006 BYTES: COLLAPSED FUNCTION LoadCursorA. PRESS KEYPAD	"+" TO EXPAND]
jmp	ds:TranslateAcceleratorA
jmp	ds:ToAscii
jmp	ds:ShowWindow
jmp	ds:SetWindowTextA ; Change the text of the window's title bar
jmp	ds:KillTimer
jmp	ds:MoveWindow
jmp	ds:SendMessageA
jmp	ds:ReleaseDC
jmp	ds:RegisterClassA
jmp	ds:PostQuitMessage
jmp	ds:SetDlgItemTextA
; [00000006 BYTES: COLLAPSED FUNCTION MessageBoxA. PRESS KEYPAD	"+" TO EXPAND]
jmp	ds:SendDlgItemMessageA
jmp	ds:LoadStringA
jmp	ds:LoadMenuA	; Loads	the specified menu resource
			; from the current executable (.EXE) file
jmp	ds:SetTimer
; [00000006 BYTES: COLLAPSED FUNCTION LoadIconA. PRESS KEYPAD "+" TO EXPAND]
jmp	ds:MessageBeep
jmp	ds:LoadAcceleratorsA
jmp	ds:CopyImage
jmp	ds:InvalidateRect
jmp	ds:DdeGetData
jmp	ds:SetFocus
jmp	ds:DialogBoxParamA ; Create a modal dialog box from a
			; dialog box template resource
jmp	ds:GetWindowTextA
jmp	ds:GetWindowRect
jmp	ds:GetSystemMetrics
jmp	ds:FillRect
jmp	ds:TrackPopupMenu
jmp	ds:GetMenuItemID
jmp	ds:GetDlgItemTextA
jmp	ds:GetDlgItem
jmp	ds:WinHelpA
jmp	ds:GetDC
jmp	ds:GetClientRect ; Get the coordinates of a window's client area
jmp	ds:GetMessageA
jmp	ds:FindWindowExA
jmp	ds:FindWindowA
jmp	ds:TranslateMessage
jmp	ds:GetWindowThreadProcessId
jmp	ds:SetCapture
jmp	ds:TextOutA
jmp	ds:StartPage
jmp	ds:StartDocA	; Start	a print	job
jmp	ds:SetTextColor
jmp	ds:SetColorSpace
jmp	ds:SetBkMode
jmp	ds:SelectClipPath
jmp	ds:GetTextMetricsA
jmp	ds:GetStockObject
jmp	ds:GetCharWidth32A
jmp	ds:Escape
jmp	ds:EndPath
jmp	ds:EndPage	; Informs the device that the application
			; has finished writing to a page
jmp	ds:EndDoc	; Ends a print job
jmp	ds:DeleteDC
jmp	ds:Chord	; Draw a chord (a region bounded by
			; the intersection of an ellipse and
			; a line segment, called a "secant")
jmp	ds:BeginPath	; Open a path bracket in DC
jmp	ds:ImageList_GetImageInfo
jmp	ds:ImageList_AddMasked
jmp	ds:CreateToolbarEx ; Create a toolbar window and adds
			; the specified	buttons	to the toolbar
jmp	ds:CreateToolbar
jmp	ds:InitCommonControls
jmp	ds:PrintDlgA	; Display a Print or a Print Setup dialog box
jmp	ds:GetSaveFileNameA ; Create a Save common dialog box
jmp	ds:GetOpenFileNameA ; Create an	Open common dialog box
jmp	ds:InitializeSecurityDescriptor
jmp	ds:SetServiceObjectSecurity
jmp	ds:ShellExecuteA ; Opens or prints a specified file
align 4
dd 4Fh dup(0)
dd 280h	dup(?)
CODE ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00001000 (   4096.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default

; Segment type:	Pure data
; Segment permissions: Read/Write
DATA segment para public 'DATA' use32
assume cs:DATA
;org 402000h
; char Caption[]
Caption	db ' MagshimimChallenge',0
db    0
db    0
db  20h
; char Text[]
Text db	'Magshimim license out of date. Plea'
db 'se buy a new one',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
; char FileName[]
FileName db 'Keyfile.dat',0
db  20h
; char aKeyfileIsNotVa[]
aKeyfileIsNotVa	db 'Keyfile is not valid. Sorry.',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
; char aDone_EnjoyYour[]
aDone_EnjoyYour	db 'Done. Enjoy your new license!!!',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; void Buffer
Buffer db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_40216F db  80h ; 
db    0
db    0
db    0
; DWORD	NumberOfBytesRead
NumberOfBytesRead dd 0
; HINSTANCE hInstance
hInstance dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_402197 dd	0
dword_40219B dd	0
dword_40219F dd	0
dword_4021A3 dd	0
dword_4021A7 dd	0
dword_4021AB dd	0
dword_4021AF dd	0
align 1000h
DATA ends

;
; Imports from KERNEL32.dll
;
; Section 3. (virtual address 00003000)
; Virtual size			: 00001000 (   4096.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default

; Segment type:	Externs
; _idata
extrn lstrcmp:dword
; BOOL __stdcall WriteFile(HANDLE hFile,LPCVOID	lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; DWORD	__stdcall GetPrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize,LPCSTR	lpFileName)
extrn GetPrivateProfileStringA:dword
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
extrn __imp_GetModuleHandleA:dword
; UINT __stdcall LocalSize(HLOCAL hMem)
extrn LocalSize:dword
; BOOL __stdcall CloseHandle(HANDLE hObject)
extrn CloseHandle:dword
; HFILE	__stdcall OpenFile(LPCSTR lpFileName,LPOFSTRUCT	lpReOpenBuff,UINT uStyle)
extrn OpenFile:dword
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile)
extrn __imp_CreateFileA:dword
; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwProcessId)
extrn OpenProcess:dword
; LONG __stdcall CompareFileTime(const FILETIME	*lpFileTime1,const FILETIME *lpFileTime2)
extrn CompareFileTime:dword
; BOOL __stdcall Beep(DWORD dwFreq,DWORD dwDuration)
extrn Beep:dword
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags,DWORD dwBytes)
extrn GlobalAlloc:dword
; HANDLE GetCurrentProcess(void)
extrn GetCurrentProcess:dword
; void __stdcall ExitThread(DWORD dwExitCode)
extrn ExitThread:dword
; BOOL __stdcall TerminateProcess(HANDLE hProcess,UINT uExitCode)
extrn TerminateProcess:dword
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
extrn GlobalFree:dword
; void __stdcall ExitProcess(UINT uExitCode)
extrn __imp_ExitProcess:dword
; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName,LPSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize)
extrn GetVolumeInformationA:dword
; BOOL __stdcall WriteProcessMemory(HANDLE hProcess,LPVOID lpBaseAddress,LPVOID	lpBuffer,DWORD nSize,LPDWORD lpNumberOfBytesWritten)
extrn WriteProcessMemory:dword
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
extrn GetLocalTime:dword
; BOOL __stdcall GetExitCodeProcess(HANDLE hProcess,LPDWORD lpExitCode)
extrn GetExitCodeProcess:dword
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
extrn QueryPerformanceCounter:dword
; BOOL __stdcall ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped)
extrn __imp_ReadFile:dword
; BOOL __stdcall VirtualProtect(LPVOID lpAddress,DWORD dwSize,DWORD flNewProtect,PDWORD	lpflOldProtect)
extrn VirtualProtect:dword
; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes)
extrn CreateDirectoryA:dword

;
; Imports from USER32.dll
;
; LONG __stdcall DispatchMessageA(const	MSG *lpMsg)
extrn DispatchMessageA:dword
; LRESULT __stdcall DefWindowProcA(HWND	hWnd,UINT Msg,WPARAM wParam,LPARAM lParam)
extrn DefWindowProcA:dword
; HWND __stdcall CreateWindowExA(DWORD dwExStyle,LPCSTR	lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int	Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID	lpParam)
extrn CreateWindowExA:dword
; BOOL __stdcall EndDialog(HWND	hDlg,int nResult)
extrn EndDialog:dword
; BOOL __stdcall EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint)
extrn EndPaint:dword
; BOOL __stdcall UpdateWindow(HWND hWnd)
extrn UpdateWindow:dword
; BOOL __stdcall SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags)
extrn SetWindowPos:dword
; HDC __stdcall	BeginPaint(HWND	hWnd,LPPAINTSTRUCT lpPaint)
extrn BeginPaint:dword
; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName)
extrn __imp_LoadCursorA:dword
; int __stdcall	TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg)
extrn TranslateAcceleratorA:dword
; int __stdcall	ToAscii(UINT uVirtKey,UINT uScanCode,PBYTE lpKeyState,LPWORD lpChar,UINT uFlags)
extrn ToAscii:dword
; BOOL __stdcall ShowWindow(HWND hWnd,int nCmdShow)
extrn ShowWindow:dword
; BOOL __stdcall SetWindowTextA(HWND hWnd,LPCSTR lpString)
extrn SetWindowTextA:dword ; Change the	text of	the window's title bar
; BOOL __stdcall KillTimer(HWND	hWnd,UINT uIDEvent)
extrn KillTimer:dword
; BOOL __stdcall MoveWindow(HWND hWnd,int X,int	Y,int nWidth,int nHeight,BOOL bRepaint)
extrn MoveWindow:dword
; LRESULT __stdcall SendMessageA(HWND hWnd,UINT	Msg,WPARAM wParam,LPARAM lParam)
extrn SendMessageA:dword
; int __stdcall	ReleaseDC(HWND hWnd,HDC	hDC)
extrn ReleaseDC:dword
; ATOM __stdcall RegisterClassA(const WNDCLASSA	*lpWndClass)
extrn RegisterClassA:dword
; void __stdcall PostQuitMessage(int nExitCode)
extrn PostQuitMessage:dword
; BOOL __stdcall SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString)
extrn SetDlgItemTextA:dword
; int __stdcall	MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType)
extrn __imp_MessageBoxA:dword
; LONG __stdcall SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam)
extrn SendDlgItemMessageA:dword
; int __stdcall	LoadStringA(HINSTANCE hInstance,UINT uID,LPSTR lpBuffer,int nBufferMax)
extrn LoadStringA:dword
; HMENU	__stdcall LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName)
extrn LoadMenuA:dword	; Loads	the specified menu resource
			; from the current executable (.EXE) file
; UINT __stdcall SetTimer(HWND hWnd,UINT nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc)
extrn SetTimer:dword
; HICON	__stdcall LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName)
extrn __imp_LoadIconA:dword
; BOOL __stdcall MessageBeep(UINT uType)
extrn MessageBeep:dword
; HACCEL __stdcall LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR	lpTableName)
extrn LoadAcceleratorsA:dword
; HANDLE __stdcall CopyImage(HANDLE,UINT,int,int,UINT)
extrn CopyImage:dword
; BOOL __stdcall InvalidateRect(HWND hWnd,const	RECT *lpRect,BOOL bErase)
extrn InvalidateRect:dword
; DWORD	__stdcall DdeGetData(HDDEDATA hData,LPBYTE pDst,DWORD cbMax,DWORD cbOff)
extrn DdeGetData:dword
; HWND __stdcall SetFocus(HWND hWnd)
extrn SetFocus:dword
; int __stdcall	DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam)
extrn DialogBoxParamA:dword ; Create a modal dialog box	from a
			; dialog box template resource
; int __stdcall	GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount)
extrn GetWindowTextA:dword
; BOOL __stdcall GetWindowRect(HWND hWnd,LPRECT	lpRect)
extrn GetWindowRect:dword
; int __stdcall	GetSystemMetrics(int nIndex)
extrn GetSystemMetrics:dword
; int __stdcall	FillRect(HDC hDC,const RECT *lprc,HBRUSH hbr)
extrn FillRect:dword
; BOOL __stdcall TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int	nReserved,HWND hWnd,const RECT *prcRect)
extrn TrackPopupMenu:dword
; UINT __stdcall GetMenuItemID(HMENU hMenu,int nPos)
extrn GetMenuItemID:dword
; UINT __stdcall GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR	lpString,int nMaxCount)
extrn GetDlgItemTextA:dword
; HWND __stdcall GetDlgItem(HWND hDlg,int nIDDlgItem)
extrn GetDlgItem:dword
; BOOL __stdcall WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,DWORD dwData)
extrn WinHelpA:dword
; HDC __stdcall	GetDC(HWND hWnd)
extrn GetDC:dword
; BOOL __stdcall GetClientRect(HWND hWnd,LPRECT	lpRect)
extrn GetClientRect:dword ; Get	the coordinates	of a window's client area
; BOOL __stdcall GetMessageA(LPMSG lpMsg,HWND hWnd,UINT	wMsgFilterMin,UINT wMsgFilterMax)
extrn GetMessageA:dword
; HWND __stdcall FindWindowExA(HWND,HWND,LPCSTR,LPCSTR)
extrn FindWindowExA:dword
; HWND __stdcall FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName)
extrn FindWindowA:dword
; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
extrn TranslateMessage:dword
; DWORD	__stdcall GetWindowThreadProcessId(HWND	hWnd,LPDWORD lpdwProcessId)
extrn GetWindowThreadProcessId:dword
; HWND __stdcall SetCapture(HWND hWnd)
extrn SetCapture:dword

;
; Imports from GDI32.dll
;
; BOOL __stdcall TextOutA(HDC,int,int,LPCSTR,int)
extrn TextOutA:dword
; int __stdcall	StartPage(HDC)
extrn StartPage:dword
; int __stdcall	StartDocA(HDC,const DOCINFOA *)
extrn StartDocA:dword	; Start	a print	job
; COLORREF __stdcall SetTextColor(HDC,COLORREF)
extrn SetTextColor:dword
; HCOLORSPACE __stdcall	SetColorSpace(HDC,HCOLORSPACE)
extrn SetColorSpace:dword
; int __stdcall	SetBkMode(HDC,int)
extrn SetBkMode:dword
; BOOL __stdcall SelectClipPath(HDC,int)
extrn SelectClipPath:dword
; BOOL __stdcall GetTextMetricsA(HDC,LPTEXTMETRICA)
extrn GetTextMetricsA:dword
; HGDIOBJ __stdcall GetStockObject(int)
extrn GetStockObject:dword
; BOOL __stdcall GetCharWidth32A(HDC,UINT,UINT,LPINT)
extrn GetCharWidth32A:dword
; int __stdcall	Escape(HDC,int,int,LPCSTR,LPVOID)
extrn Escape:dword
; BOOL __stdcall EndPath(HDC)
extrn EndPath:dword
; int __stdcall	EndPage(HDC)
extrn EndPage:dword	; Informs the device that the application
			; has finished writing to a page
; int __stdcall	EndDoc(HDC)
extrn EndDoc:dword	; Ends a print job
; BOOL __stdcall DeleteDC(HDC)
extrn DeleteDC:dword
; BOOL __stdcall Chord(HDC,int,int,int,int,int,int,int,int)
extrn Chord:dword	; Draw a chord (a region bounded by
			; the intersection of an ellipse and
			; a line segment, called a "secant")
; BOOL __stdcall BeginPath(HDC)
extrn BeginPath:dword	; Open a path bracket in DC

;
; Imports from COMCTL32.DLL
;
; BOOL __stdcall ImageList_GetImageInfo(HIMAGELIST himl,int i,IMAGEINFO	*pImageInfo)
extrn ImageList_GetImageInfo:dword
; int __stdcall	ImageList_AddMasked(HIMAGELIST himl,HBITMAP hbmImage,COLORREF crMask)
extrn ImageList_AddMasked:dword
; HWND __stdcall CreateToolbarEx(HWND hwnd,DWORD ws,UINT wID,int nBitmaps,HINSTANCE hBMInst,UINT wBMID,LPCTBBUTTON lpButtons,int iNumButtons,int dxButton,int dyButton,int dxBitmap,int	dyBitmap,UINT uStructSize)
extrn CreateToolbarEx:dword ; Create a toolbar window and adds
			; the specified	buttons	to the toolbar
extrn CreateToolbar:dword
; void InitCommonControls(void)
extrn InitCommonControls:dword

;
; Imports from COMDLG32.dll
;
; BOOL __stdcall PrintDlgA(LPPRINTDLGA)
extrn PrintDlgA:dword	; Display a Print or a Print Setup dialog box
; BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA)
extrn GetSaveFileNameA:dword ; Create a	Save common dialog box
; BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA)
extrn GetOpenFileNameA:dword ; Create an Open common dialog box

;
; Imports from ADVAPI32.dll
;
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD dwRevision)
extrn InitializeSecurityDescriptor:dword
; BOOL __stdcall SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor)
extrn SetServiceObjectSecurity:dword

;
; Imports from SHELL32.DLL
;
; HINSTANCE __stdcall ShellExecuteA(HWND hwnd,LPCSTR lpOperation,LPCSTR	lpFile,LPCSTR lpParameters,LPCSTR lpDirectory,INT nShowCmd)
extrn ShellExecuteA:dword ; Opens or prints a specified	file



end start
